<%
/**
 *  Copyright (c) 2016, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *  WSO2 Inc. licenses this file to you under the Apache License,
 *  Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 *
 */
(function () {
    var log = new Log();

    if (!user) {
        response.sendError(401, 'unauthorized to access assets');
        return;
    }
    var utils = require('/modules/utils.js');
    var configs = require('/modules/config.js').getConfigFile();
    var fileUtils = require('/modules/file-utils.js');

    var CONTEXT = '/portal';
    var PROVIDERS_LOCATION = '/extensions/providers/';
    var GADGET_LOCATION = '/store/carbon.super/';
    var PARTIAL_LOCATION = '/partials/';
    var CHART_LOCATION = '/extensions/chart-templates/';
    var GADGETS_LOCATION = '/store/' + session.get('user').domain + '/fs/gadget/';
    var GADGET_TEMPLATE_LOCATION = '/templates/gadgets/gadget-generation-templates/';
    var TEMP_GADGET_LOCATION = '/temp/';

    var PROVIDER_API_FILE = '/api.js';
    var CHART_API_FILE = '/api.js';
    var PROVIDER_CONFIG_FILE = '/config.json';
    var CHART_CONFIG_FILE = '/config.json';
    var EDIT_CONFIG_FILE = '/conf.json';
    var GADGET_XML_FILE = '/gadget.xml';

    var VALUE_SET = 'valueSet';
    var SCHEME_NOTIFIER = '$COLUMN_NAMES';
    var PROVIDER_CONF = 'provider-conf';
    var PROVIDER_NAME = 'provider-name';
    var PARTIAL = 'partial';
    var CHART_CONF = 'chart-conf';
    var CHART_NAME = 'chart-name';
    var GADGET_NAME = 'gadget-name';
    var FIELD_NAME = 'fieldName';

    response.contentType = 'application/json';

    var action = request.getParameter("action");
    var id = request.getParameter("id");
    var type = request.getParameter("type");
    var store = request.getParameter("store");
    var editable = request.getParameter("editable");
    var data = request.getContent();

    var providerApiLocation;
    var providerApi;
    var validate;
    var chartApi;
    var gadgetID;

    if (action === 'getProviders') {
        var providers = [];
        var providerIgnoreList = configs.gadgetGeneration.ignoreProviders;
        var allProviders = fileUtils.getFileNameList(PROVIDERS_LOCATION);

        var requiredProviders = allProviders.filter(function (el) {
            return providerIgnoreList.indexOf(el) < 0;
        });

        for (var i = 0; i < requiredProviders.length; i++) {
            var configJson = require(PROVIDERS_LOCATION + requiredProviders[i] + PROVIDER_CONFIG_FILE);
            providers.push(configJson.info);
        }
        print(providers);
        return;

    } else if (action === 'getProviderConfig') {
        providerApiLocation = PROVIDERS_LOCATION + data[PROVIDER_CONF][PROVIDER_NAME] + PROVIDER_API_FILE;
        providerApi = require(providerApiLocation);
        print(providerApi.getConfig().config);
        return;

    } else if (action === 'getProviderAdvancedUI') {
        var providerHbsFile = null;
        try {
            providerHbsFile = new File(PROVIDERS_LOCATION + data[PROVIDER_CONF][PROVIDER_NAME] + PARTIAL_LOCATION +
                    data[PROVIDER_CONF][PARTIAL] + '.hbs');
            if (!providerHbsFile.isExists()) {
                return null;
            }
            providerHbsFile.open('r');
            var customProviderPartial = providerHbsFile.readAll();
        } catch (e) {
            log.error(e.message);
        } finally {
            if (providerHbsFile) {
                providerHbsFile.close();
            }
        }
        print(customProviderPartial);
        return;
    }
    else if (action==='getEditConfig'){
        providerApiLocation = GADGET_LOCATION + store +'/'+type +'/'+ id+ EDIT_CONFIG_FILE;
        providerApi = require(providerApiLocation);
        print(providerApi);
        return;

    } else if (action === 'getData') {
        providerApiLocation = PROVIDERS_LOCATION + data[PROVIDER_CONF][PROVIDER_NAME] + PROVIDER_API_FILE;
        providerApi = require(providerApiLocation);
        validate = providerApi.validate(data[PROVIDER_CONF]);
        var dataSet;
        if (!validate.error) {
            try {
                dataSet = providerApi.getData(data[PROVIDER_CONF], 10);
            } catch (e) {
                print(
                        {
                            "error": true,
                            "message": e.message
                        }
                );
                return;
            }
            var output = {};
            if (dataSet && dataSet.length > 0) {
                output.tableHeaders = Object.keys(dataSet[0]);
                output.tableRows = [];

                for (var i in dataSet) {
                    _obj = [];
                    for (var k in dataSet[i]) {
                        _obj.push(dataSet[i][k])
                    }
                    output.tableRows.push(_obj);
                }
                print(output);
                return;
            } else {
                log.error('No data found');
                print(
                        {
                            "error": true,
                            "message": "No data found"
                        }
                );
                return;
            }
        }
        else {
            log.error("Data validation failed for Provider Configuration");
            print(validate);
            return;
        }

    } else if (action === 'getChartList') {
        var chartList = [];
        var chartDirList = fileUtils.getFileNameList(CHART_LOCATION);

        for (var i = 0; i < chartDirList.length; i++) {
            var chartConfigJson = require(CHART_LOCATION + chartDirList[i] + CHART_CONFIG_FILE);
            chartList.push(chartConfigJson.info);
        }
        print(chartList);
        return;
    } else if (action === 'getChartConfig') {
        providerApiLocation = PROVIDERS_LOCATION + data[PROVIDER_CONF][PROVIDER_NAME] + PROVIDER_API_FILE;
        providerApi = require(providerApiLocation);
        var schema = null;
        validate = providerApi.validate(data[PROVIDER_CONF]);
        if (!validate.error) {
            schema = providerApi.getSchema(data[PROVIDER_CONF]);
        } else {
            log.error(validate.message);
            print(validate);
            return;
        }
        chartApi = require(CHART_LOCATION + data.chartType + CHART_API_FILE );
        if (!schema.error) {
            var modifiedChartConfig = chartApi.getConfig(schema);
            for (var i in modifiedChartConfig) {
                if (modifiedChartConfig[i][VALUE_SET] && SCHEME_NOTIFIER === modifiedChartConfig[i][VALUE_SET][0]) {
                    modifiedChartConfig[i][VALUE_SET].splice(0);
                    for (var j in schema) {
                        modifiedChartConfig[i][VALUE_SET].push(schema[j][FIELD_NAME]);
                    }
                }
            }
            print(modifiedChartConfig);
            return;
        } else {
            log.error(schema.message);
            print(schema);
            return;
        }
    } else if (action === 'getChartAdvancedUI') {
        var chartHbsFile = null;
        try {
            chartHbsFile = new File(CHART_LOCATION + data.chartType + PARTIAL_LOCATION + data.partial + '.hbs');
            if (!chartHbsFile.isExists()) {
                return null;
            }
            chartHbsFile.open('r');
            var customPartial = chartHbsFile.readAll();
        } catch (e) {
            log.error(e.message);
        } finally {
            if (chartHbsFile) {
                chartHbsFile.close();
            }
        }
        print(customPartial);
        return;
    } else if (action === 'preview') {
        providerApiLocation = PROVIDERS_LOCATION + data[PROVIDER_CONF][PROVIDER_NAME] + PROVIDER_API_FILE;
        providerApi = require(providerApiLocation);
        var chartConf = data[CHART_CONF];
        var chart = chartConf[CHART_NAME];
        var chartApiLocation = CHART_LOCATION + chart + CHART_API_FILE;
        var userDomain = session.get('user').domain;
        chartApi = require(chartApiLocation);
        validate = chartApi.validate(chartConf);
        if(!validate.error){
            gadgetID = chartConf[GADGET_NAME].replace(/ /g,"_");

            var gadgetStoreFile = new File(GADGETS_LOCATION + gadgetID);
            if(gadgetStoreFile.isExists() && editable!=='true' ){
                print({
                    error: true,
                    message: "Gadget with the same name already exists"
                });
                return;
            }

            var tempDir = new File(TEMP_GADGET_LOCATION);
            if(!tempDir.isExists()){
                tempDir.mkdir();
            }

            var gadgetDirLocation = TEMP_GADGET_LOCATION + userDomain + "/" + gadgetID;
            var gadgetDir = new File(gadgetDirLocation);
            if(gadgetDir.isExists()) {
                gadgetDir.del();
            }

            fileUtils.createDirs(gadgetDirLocation);
            var provider = data[PROVIDER_CONF][PROVIDER_NAME];
            var isPushMode = false;
            if(providerApi.getMode().toLowerCase() === 'push'){
                isPushMode = true;
            }

            if(isPushMode){
                var providerClient = new File(PROVIDERS_LOCATION + provider + '/client.js');
                fileUtils.copyFile(providerClient, gadgetDirLocation + '/js/core/provider-client.js');
            }

            var gadgetJsonData = {};
            gadgetJsonData['gadget_id'] = gadgetID;
            gadgetJsonData['gadget_title'] = chartConf[GADGET_NAME];
            gadgetJsonData['gadget_url'] = 'gadget/'+ gadgetID + GADGET_XML_FILE;
            fileUtils.transformCopyFile(GADGET_TEMPLATE_LOCATION + 'gadget.json.hbs',
                            gadgetDirLocation +'/gadget.json', gadgetJsonData );

            var gadgetUtilData = {};
            gadgetUtilData['gadget_location'] = CONTEXT + gadgetDirLocation;
            fileUtils.transformCopyFile(GADGET_TEMPLATE_LOCATION + 'js/gadget-util.js.hbs',
                    gadgetDirLocation +'/js/core/gadget-util.js', gadgetUtilData);

            var gadgetCoreJsData = {};
            gadgetCoreJsData['isPullMode'] = !isPushMode;
            fileUtils.transformCopyFile(GADGET_TEMPLATE_LOCATION + 'js/gadget-core.js.hbs',
                            gadgetDirLocation +'/js/core/gadget-core.js', gadgetCoreJsData);

            var gadgetXmlData = {};
            gadgetXmlData['gadget_title'] = chartConf[GADGET_NAME];
            gadgetXmlData['isPushMode'] = isPushMode;
            gadgetXmlData['chart-type'] = chart;
            var chartConfigFile = require(CHART_LOCATION + chart + CHART_CONFIG_FILE);

            if(chartConfigFile['imports']) {
                gadgetXmlData['chart-js'] = chartConfigFile['imports']["js"];
                gadgetXmlData['chart-css'] = chartConfigFile['imports']["css"];
                if(chartConfigFile['imports']["libs"]) {
                    gadgetXmlData['chart-vendor-js'] = chartConfigFile['imports']["libs"]["js"];
                    gadgetXmlData['chart-vendor-css'] = chartConfigFile['imports']["libs"]["css"];
                }
                if(chartConfigFile['imports']["shared-libs"]) {
                    gadgetXmlData['shared-js'] =chartConfigFile['imports']["shared-libs"]["js"];
                    gadgetXmlData['shared-css'] = chartConfigFile['imports']["shared-libs"]["css"];
                }
            }

            var providerConf = require(PROVIDERS_LOCATION + provider + PROVIDER_CONFIG_FILE);
            var providerLibs = providerConf['provider-libs'];
            gadgetXmlData['provider-libs'] = providerLibs;
            gadgetXmlData['gadget_location'] = CONTEXT + gadgetDirLocation;
            fileUtils.transformCopyFile(GADGET_TEMPLATE_LOCATION + 'gadget.xml.hbs',
                            gadgetDirLocation + GADGET_XML_FILE, gadgetXmlData);

            var gadgetControllerFile = new File(GADGET_TEMPLATE_LOCATION + 'gadget-controller.jag');
            fileUtils.copyFile(gadgetControllerFile, gadgetDirLocation + '/gadget-controller.jag');

            var chartLibsDir = new File(CHART_LOCATION + chart + '/libs/');
            fileUtils.copyDir(chartLibsDir, gadgetDirLocation);

            var chartJsDir = new File(CHART_LOCATION + chart + '/js/');
            fileUtils.copyDir(chartJsDir, gadgetDirLocation);

            var chartCssDir = new File(CHART_LOCATION + chart + '/css/');
            fileUtils.copyDir(chartCssDir, gadgetDirLocation);

            var providerLibsDir = new File(PROVIDERS_LOCATION + provider + '/provider-libs/');
            fileUtils.copyDir(providerLibsDir, gadgetDirLocation + '/js/');

            var providerApiFile = new File(providerApiLocation);
            fileUtils.copyFile(providerApiFile, gadgetDirLocation + '/js/core/' + provider + '-provider-api.js');

            var providerApis = providerConf['provider-apis'];
            if (providerApis) {
                for (var f in providerApis) {
                    fileUtils.copyFile(new File(PROVIDERS_LOCATION + data[PROVIDER_CONF][PROVIDER_NAME] + '/' + providerApis[f]),
                                    gadgetDirLocation + '/js/core/' + providerApis[f]);
                }
            }

            var chartApiFile = new File(chartApiLocation);
            fileUtils.copyFile(chartApiFile, gadgetDirLocation + '/js/core/' + chart + '-api.js');

            var previewTempLocation = TEMP_GADGET_LOCATION + gadgetID + '_' + userDomain + '/preview.jag';
            var previewFile = new File(previewTempLocation);
            fileUtils.createDirs(previewTempLocation);
            if(previewFile.isExists()){
                previewFile.del();
            }
            var previewData = {};
            previewData['absolute_gadget_url'] = utils.getCarbonServerAddress('https') + CONTEXT + gadgetDirLocation +
                    GADGET_XML_FILE + '?' + new Date().getTime();
            fileUtils.transformCopyFile(GADGET_TEMPLATE_LOCATION + 'preview.jag.hbs',
                    previewTempLocation, previewData);

            var thumbnail = new File(GADGET_TEMPLATE_LOCATION + 'thumbnail.png');
            fileUtils.copyFile(thumbnail,gadgetDirLocation + '/thumbnail.png');

            fileUtils.writeToFile(data, gadgetDirLocation + '/conf.json');
            print({
                location: previewTempLocation.substring(1),
                error: false
            });
            return;
        }
        else {
            log.error("Data validation failed for Chart Configuration");
            print(validate);
            return;
        }
    } else if(action === 'addGadgetToStore'){
        providerApiLocation = PROVIDERS_LOCATION + data[PROVIDER_CONF][PROVIDER_NAME] + PROVIDER_API_FILE;
        providerApi = require(providerApiLocation);
        gadgetID = data[CHART_CONF][GADGET_NAME].replace(/ /g,"_");
        var isPushMode = false;
        var userDomain = session.get('user').domain;
        if(providerApi.getMode().toLowerCase() === 'push'){
            isPushMode = true;
        }
        var gadgetStoreFile = new File(GADGETS_LOCATION + gadgetID);

        if(gadgetStoreFile.isExists() && editable!=='true' ){
            print({
                error: true,
                message: "Gadget with the same name already exists "
            });
            return ;

        }

        fileUtils.replaceText(TEMP_GADGET_LOCATION + userDomain + '/' + gadgetID +'/js/core/gadget-util.js', CONTEXT + TEMP_GADGET_LOCATION + userDomain + '/' + gadgetID,
                CONTEXT + GADGETS_LOCATION + gadgetID);

        fileUtils.replaceText(TEMP_GADGET_LOCATION + userDomain + '/' + gadgetID + GADGET_XML_FILE, CONTEXT + TEMP_GADGET_LOCATION + userDomain + '/' + gadgetID,
                           CONTEXT + GADGETS_LOCATION + gadgetID);

        var gadgetDir = new File(TEMP_GADGET_LOCATION + userDomain + '/' + gadgetID);
        fileUtils.copyDir(gadgetDir, GADGETS_LOCATION);

        var previewTempDirectory = TEMP_GADGET_LOCATION + gadgetID + '_' + userDomain;
        var tempPreviewDir = new File(previewTempDirectory);
        if (tempPreviewDir.isExists()) {
            tempPreviewDir.del();
        }
        if(gadgetDir.isExists()) {
            gadgetDir.del();
        }
        print({
            error: false
        });
        return;
    } else if (action === 'testConnection') {
        providerApiLocation = PROVIDERS_LOCATION + data[PROVIDER_CONF][PROVIDER_NAME] + PROVIDER_API_FILE;
        providerApi = require(providerApiLocation);
        validate = providerApi.validate(data[PROVIDER_CONF]);
        var dataSet;
        try {
            dataSet = providerApi.getData(data[PROVIDER_CONF], 10);
        } catch (e) {
            print({
                error: true,
                message: e.message
            });
            return;
        }
        if (validate.error) {
              print({
                error: true,
                message: "Database configuration error"
            });
            return;
        } else if (dataSet.error) {
            print({
                error: true,
                message: "Database schema validation error"
            });
            return;
        }
        else {
            print({
                error: false
            });
            return;
        }
    }

    response.sendError(404, JSON.stringify({
        error: true
    }));

}());


%>
