<%
/*
 * Copyright (c) 2016, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var user;
(function () {
    var log = new Log();
    var configs = require('/configs/portal.js').config();
    var tokenUtil = require("/modules/tokenUtil.js").tokenUtil;
    var constants = require("/modules/constants.js");
    var dashboards = require('/modules/dashboards.js');
    var permission = require("/modules/permission.js");
    var conf = require("/modules/config.js").getConfigFile();
    var i18n = require("i18n");
    i18n.init(request, utils.getLocaleResourcePath());

    /**
     * Sanitize the input value.
     * @param destination {String}
     * @return string
     * @private
     */
    var sanitizeDestination = function (destination) {
        if (!destination) {
            return "";
        }
        return destination.replace(/[^a-zA-Z0-9-_/?&=. ]/g, "");
    };
    if (request.getMethod() === 'POST') {
        var dest = sanitizeDestination(request.getParameter("destination"));
        if (dest) {
            // Check whether the dest. URL starts with either http:// or https://. If so remove the authority and get
            // the rest of the URL.
            if (/^https?:\/\//i.test(dest)) {
                var url = new Packages.java.net.URL(dest),
                        authority = url.getAuthority();
                dest = dest.substring(dest.indexOf(authority) + authority.length());
            }
            // Check whether the dest. URL starts with '/'. If not prepend the '/'.
            if (!/^\//i.test(dest)) {
                dest = '/' + dest;
            }
            // Check whether the dest. URL starts with '/portal'. if not set the url to '/portal'.
            if (!/^\/portal/i.test(dest)) {
                dest = '/portal/';
            }
        }
        var username = request.getParameter("username");
        var password = request.getParameter("password");
        var usr = require('/modules/user.js');
        var api = require('/modules/api.js');
        var carbon = require('carbon');
        user = carbon.server.tenantUser(username);
        if (user.tenantId !== -1) {
            if (usr.login(username, password)) {
                if (!permission.isAllowed(constants.LOGIN)) {
                    // If user do not have necessary permissions, display an error message and logout the user
                    message = 'login.unauthorized.messages';
                    usr.logout();
                    response.sendRedirect(dest + "login?loginAttempt=true");
                    return;
                }
                session.put("Loged", "true");
                var authToken = api.authenticate(username, password);
                var properties = {username: username, password: password};
                var idPServer = tokenUtil.getIdPServerURL();
                if (tokenUtil.checkOAuthEnabled() && idPServer) {
                    tokenUtil.setupAccessTokenPair(constants.GRANT_TYPE_PASSWORD, properties, idPServer, function (status) {
                        if (!status) {
                            log.error("Error while setting up access token and refresh token");
                        }
                    });
                }
                session.put('authToken', authToken);
                if (log.isDebugEnabled()) {
                    log.debug(session.get('user') + " is authorized.");
                }
                if (dest) {
                    if ((dest.indexOf(conf.tenantPrefix + '/' + user.domain) > -1) || (dest.indexOf(conf.tenantPrefix + "/") < 0
                            && superDomain === String(user.domain))) {
                        response.sendRedirect(dest);
                    } else {
                        response.sendRedirect('/' + constants.APP_NAME + '/');
                    }
                }
                var content = {'sessionId': session.getId()};
                response.status = 200;
                response.contentType = 'application/json';
                response.content = content;
            }
            else {
                if (dest) {
                    response.sendRedirect('/' + constants.APP_NAME + '/login?loginAttempt=true&destination=' + dest);
                }
            }
        }
        else {
            if (dest) {
                response.sendRedirect('/' + constants.APP_NAME + '/login?loginAttempt=true&destination=' + dest);
            }
        }
    }
    else {
        response.sendError(403, i18n.localize("forbidden"));
    }
}()); %>
