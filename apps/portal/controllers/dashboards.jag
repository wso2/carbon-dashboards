<%
/*
 * Copyright (c) 2015, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var pageId;
var dashboard;
var fresh;
var DASHBOARD_VERSION = "1.0.20";

(function () {
    var vars;
    var dashboardId;
    var matcher = new URIMatcher(request.getRequestURI());
    var constants = require('/modules/constants.js');
    var log = new Log("/controllers/dashboards.jag");
    var permission = require('/modules/permission.js');
    var i18n = require("i18n");

    /**
     * Sanitize the input value.
     * @param input {String}
     * @return string
     * @private
     */
    var sanitizeInput = function (input) {
        if (!input) {
            return "";
        }
        return input.replace(/[^a-z0-9-\s]/gim, "");
    };

    if (matcher.match('/dashboards/{id}') || matcher.match('/dashboards/{id}/{page}')) {
        vars = matcher.elements();
        dashboardId = sanitizeInput(vars.id);
        pageId = vars.page;
    }

    // If User request for portal/dashboards, redirect user to dashboard list.
    if (!dashboardId) {
        if (!user) {
            sendLogin();
            return;
        }
        if (userDomain !== (urlDomain || superDomain)) {
            response.sendError(401, 'Designer access not authorized of this tenant');
            return;
        }
        include(utils.resolvePath("templates/index.jag"));
        return;
    }

    var dashboards;
    var editor;
    var isCustomize;
    var isPersonalize;
    var toReset;
    var method = request.getMethod();
    editor = request.getParameter('editor');

    if (method === 'GET') {
        dashboards = require('/modules/dashboards.js');

        if (!request.getParameter("shared")) {
            utils.sandbox(context, function () {
                dashboard = dashboards.getAsset(dashboardId);
            });
            if (!dashboard) {
                response.sendError(404, "Dashboard '" + dashboardId + "' cannot be found");
                return;
            }
            if (!dashboard.menu && dashboard.pages.length > 0) {
                if (log.isDebugEnabled()) {
                    log.debug("Unable to locate menu object, updating dashboard.json for: " + dashboardId);
                }

                dashboard = decorateDashboard(dashboard);
                utils.sandbox(context, function () {
                    dashboards.update(dashboard);
                });

                if (log.isDebugEnabled()) {
                    log.debug("Updated dashboard.json for: " + dashboardId);
                }
            }
            // Verify the original dashboard when returning a custom dashboard
            if (dashboard.isUserCustom) {

                // Get the original dashboard
                var originalDashboard;
                utils.sandbox(context, function () {
                    originalDashboard = dashboards.getAsset(dashboardId, true);
                });

                // If the original dashboard is deleted, returns 404
                if (!originalDashboard) {
                    response.sendError(404, "Dashboard '" + dashboardId + "' cannot be found");
                    return;
                }

                // If the user doesn't have any permission on the original dashboard, returns 401
                var authorized = false;

                // To view personalized dashboard, the user should have logged in, in the same domain and should have either editor or viewer permissions
                if (user && user.domain == (urlDomain || superDomain) &&
                        (utils.allowed(user.roles, originalDashboard.permissions.editors) || utils.allowed(user.roles, originalDashboard.permissions.viewers))) {
                    authorized = true;
                }

                if (!authorized) {
                    // If there is no anon view defined send the unauthorized error, else return the anon view
                    if (!originalDashboard.isanon) {
                        response.sendError(401, "Access to dashboard '" + dashboardId + "' is denied");
                        return;
                    }

                    dashboard = originalDashboard;
                }
                dashboard.personalizeDashboard = originalDashboard.personalizeDashboard;
            }

            isCustomize = request.getParameter('custom');
            isPersonalize = request.getParameter('personalize');

            if (isCustomize) {
                dashboards.copy(dashboard);
                response.sendRedirect(tenantedUrlPrefix + 'dashboards/' + dashboardId + '?editor=true');
                return;
            }

            if (isPersonalize === 'true') {
                for (var i = 0; i < dashboard.pages.length; i++) {
                    dashboard.pages[i].isanon = false;
                }

                dashboards.copy(dashboard);
                response.sendRedirect(tenantedUrlPrefix + 'dashboards/' + dashboardId + '/' + pageId + '?dashboardeditor=true');
                return;
            }

            if (isPersonalize === 'true') {
                for (var i = 0; i < dashboard.pages.length; i++) {
                    dashboard.pages[i].isanon = false;
                }

                dashboards.copy(dashboard);
                response.sendRedirect(tenantedUrlPrefix + 'dashboards/' + dashboardId + '/' + pageId + '?dashboardeditor=true');
                return;
            }

            toReset = request.getParameter('reset');

            if (toReset) {
                dashboards.reset(dashboard.id);
                response.sendRedirect(tenantedUrlPrefix + 'dashboards/' + dashboardId);
                return;
            }

            if (user && !urlDomain && user.domain != superDomain) {
                response.sendRedirect(utils.tenantedPrefix(urlPrefix, superDomain) + "dashboards/" + dashboardId);
                return;
            }
            var databaseUtils = require('/modules/database-utils.js');
            var dashboardid = dashboard.id + (dashboard.isUserCustom ? '$' : '');
            if (user && !databaseUtils.isDashboardExistInDatabase(dashboardid)) {
                dashboards.updateGadgetUsageInDashboard(dashboard, dashboardid);
            }

        } else {
            utils.sandbox(context, function () {
                dashboard = dashboards.getSharedDashboard(dashboardId);
            });

            if (!dashboard) {
                response.sendError(404, "Dashboard '" + dashboardId + "' cannot be found");
                return;
            }
            editor = false;
        }
        editor ? include('includes/designer.jag') : include('includes/renderer.jag');
        return;
    }

    if (method === 'POST') {
        if (!user) {
            sendLogin();
            return;
        }
        if (!permission.isAllowed(constants.CREATE)) {
            // If the user is not permitted to access it, send unauthorized error message.
            response.sendError(403, "" + i18n.localize("access.not.authorized"));
            return;
        }
        dashboards = require('/modules/dashboards.js');
        utils = require('/modules/utils.js');
        constants = require('/modules/constants.js');
        dashboard = {
            version: DASHBOARD_VERSION,
            id: dashboardId,
            title: sanitizeInput(request.getParameter('title')),
            description: sanitizeInput(request.getParameter('description')),
            permissions: {
                viewers: [constants.INTERNAL_ROLE.concat(constants.INTERNAL_ROLE_FORWARDSLASH, dashboardId, constants.INTERNAL_ROLE_SEPERATOR, constants.INTERNAL_ROLE_VIEWER)],
                editors: [constants.INTERNAL_ROLE.concat(constants.INTERNAL_ROLE_FORWARDSLASH, dashboardId, constants.INTERNAL_ROLE_SEPERATOR, constants.INTERNAL_ROLE_EDITOR)],
                owners: [constants.INTERNAL_ROLE.concat(constants.INTERNAL_ROLE_FORWARDSLASH, dashboardId, constants.INTERNAL_ROLE_SEPERATOR, constants.INTERNAL_ROLE_OWNER)]
            },
            pages: [],
            menu: [],
            hideAllMenuItems: false,
            identityServerUrl: "",
            accessTokenUrl: "",
            apiKey: "",
            apiSecret: "",
            theme: request.getParameter('select-theme'),
            shareDashboard: false,
            personalizeDashboard: false
        };

        utils.sandbox(context, function () {
            dashboards.create(dashboard);
        });

        response.sendRedirect(tenantedUrlPrefix + 'dashboards/' + dashboardId + '?editor=true');
        return;
    }

    function decorateDashboard(dashboard) {
        dashboard.menu = [];
        for (var i = 0, length = dashboard.pages.length; i < length; i++) {
            var menu = {
                "id": dashboard.pages[i].id,
                "isanon": false,
                "ishidden": false,
                "title": dashboard.pages[i].title,
                "subordinates": []
            };
            dashboard.menu.push(menu);
        }
        dashboard.hideAllMenuItems = false;
        return dashboard;
    }

    response.sendError(400, 'Bad dashboard request');
}());
%>
