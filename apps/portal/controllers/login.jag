<%
/**
 * Copyright (c) 2016, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var message;
var dest;
(function () {
    var usr;
    var user;
    var username;
    var password;
    var carbon;
    var log = new Log();
    var method = request.getMethod();
    var configs = require('/configs/portal.js').config();
    dest = request.getParameter('destination');
    if (method === 'POST') {
        // Sanitize the dest. URL to prevent redirecting to malicious websites
        if (dest) {
            // Check whether the dest. URL starts with either http:// or https://. If so remove the authority and get
            // the rest of the URL.
            if (/^https?:\/\//i.test(dest)) {
                var url = new Packages.java.net.URL(dest),
                        authority = url.getAuthority();
                dest = dest.substring(dest.indexOf(authority) + authority.length());
            }
            // Check whether the dest. URL starts with '/'. If not prepend the '/'.
            if (!/^\//i.test(dest)) {
                dest = '/' + dest;
            }
            // Check whether the dest. URL starts with '/portal'. if not set the url to '/portal'.
            if (!/^\/portal/i.test(dest)) {
                dest = '/portal';
            }
        }
        carbon = require('carbon');
        username = request.getParameter('username');
        user = carbon.server.tenantUser(username);
        if (user.tenantId !== -1) {
            usr = require('/modules/user.js');
            password = request.getParameter('password');
            if (usr.login(username, password)) {
                //authorize the backend API too
                var api = require('/modules/api.js');
                var authToken = api.authenticate(username, password);
                session.put('authToken', authToken);
                if (dest) {
                    response.sendRedirect(dest);
                    return;
                }
                if (superDomain == user.domain) {
                    response.sendRedirect(urlPrefix);
                    return;
                }
                response.sendRedirect(utils.tenantedPrefix(urlPrefix, user.domain));
                return;
            }
        }
        message = 'incorrect.login.message';
        include(utils.resolvePath('templates/login.jag'));
    }

    function createDir(path) {
        var file = new File(path);
        if (file.isExists()) {
            file.del();
        }
        file.mkdir();
    }

    function copyFile(src, dst) {
        var stream = src.getStream();
        dst = dst + '/' + src.getName();
        var dstf = new File(dst);
        dstf.open('w');
        dstf.write(stream);
        dstf.close();
    }

    function copyDir(source, destination) {
        if (source.isDirectory()) {
            createDir(destination + "/" + source.getName());
            destination = destination + "/" + source.getName();
            var sourceFiles = source.listFiles();
            for (var i = 0; i < sourceFiles.length; i++) {
                var inFile = sourceFiles[i];
                log.info(inFile.getName());
                copyDir(inFile, destination);
            }
        } else {
            copyFile(source, destination);
        }
    }
}());
%>